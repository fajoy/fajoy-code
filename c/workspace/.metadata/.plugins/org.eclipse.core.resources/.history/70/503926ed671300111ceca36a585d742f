#define PIPE_BUF 4096
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>
#define queMAX 32767
#include <string.h>
#include <limits.h>
#include <sys/select.h>
#include "Array.h"
#include "ClientQueue.h"
#define ndebug

int PORTNUM = 8000;

int erro_fd;
int stdo_fd;
int stdi_fd;
static int mainPid = -1;
int isCanClientReadCmd=1;
Array *split(char *str, const char *del) {
	char *root = strdup(str);
	char *sub = strtok(root, del);
	Array *list = newArray(100);
	int i;
	while (sub != NULL) {
		i = list->length;
		ArrayPush(list, sub);
		sub = strtok(NULL, del);
	}
	free(sub);
	return list;
}

typedef struct PipeFD {
	int out_fd;
	int in_fd;
} PipeFD;

PipeFD newPipeFD() {
	int fd[2];
	pipe(fd);
	PipeFD pfd = { fd[0], fd[1] };
	return pfd;
}
void closePipe(PipeFD *fd) {
	close(fd->in_fd);
	close(fd->out_fd);
	fd->in_fd = -1;
	fd->out_fd = -1;
}
void closeOutput(PipeFD *fd) {
	close(fd->out_fd);
}
void closeInput(PipeFD *fd) {
	close(fd->in_fd);
}
int isNull(PipeFD *fd) {
	return (fd->in_fd == -1 && fd->out_fd == -1);
}
typedef struct Cmd {
	int p_id;
	int argc;
	char **argv;
	int readFd;
	int writeFd;
	PipeFD outPipe;
	struct Cmd *parent;
	struct Cmd *first;
	struct Cmd *prev;
	struct Cmd *next;
} Cmd;

Cmd getCmd(char *cmd, char *del) {
	Cmd c;
	Array *arr = split(cmd, del);
	if (arr->length != 0)
		c.argc = ToArray(arr, &c.argv);
	else
		c.argc = 0;
	c.parent = NULL;
	c.prev = NULL;
	c.next = NULL;
	c.outPipe.in_fd = -1;
	c.outPipe.out_fd = -1;
	c.writeFd = -1;
	c.readFd = -1;
	return c;
}

void setCmd(Cmd *cmd) {
	int i, fd = 1;

	for (i = 1; i + 1 < cmd->argc; i++) {
		if (strncmp(cmd->argv[i], ">", 1) == 0) {
			char *fpath = cmd->argv[i + 1];
			if (strncmp(cmd->argv[i], ">>", 2) == 0)
				fd = open(fpath, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR
						| S_IWUSR | S_IRGRP | S_IWGRP);
			else
				fd = open(fpath, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR
						| S_IWUSR | S_IRGRP | S_IWGRP);
			cmd->argv[i] = NULL;
			cmd->writeFd = fd;

		} else if (strncmp(cmd->argv[i], "< ", 2) == 0) {
			char *fpath = cmd->argv[i + 1];
			fd = open(fpath, O_RDONLY, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
			cmd->argv[i] = NULL;
			cmd->readFd = fd;
		}
	}
	if (cmd->readFd == -1) {
		if (isNull(&cmd->outPipe)) {
			cmd->readFd = cmd->parent->outPipe.out_fd;

		} else {
			cmd->readFd = cmd->outPipe.out_fd;
		}
	}
	if (cmd->writeFd == -1) {
		if (cmd->next == NULL)
			cmd->writeFd = cmd->parent->outPipe.in_fd;
		else {
			if (isNull(&cmd->next->outPipe))
				cmd->next->outPipe = newPipeFD();
			cmd->writeFd = cmd->next->outPipe.in_fd;
		}
	}
}

int spawn(Cmd *cmd) {
	char *prog = cmd->argv[0];
	char **arg_list = cmd->argv;

	pid_t child = 0;

	//dup2Cmd(cmd);
	setCmd(cmd);
	child = fork();

	if (child != 0) {
		if (child > 0) {
			cmd->p_id = child;
		}
		return child;
	} else {

#ifdef debug
		dprintf(stdo_fd,"(%d)%s ",getpid(),cmd->argv[0]);
		if(!isNull(&cmd->outPipe))
		dprintf(stdo_fd,"i(%d) o(%d) ",cmd->outPipe.in_fd,cmd->outPipe.out_fd);
		dprintf(stdo_fd,"%d-%d %d-%d\n",cmd->readFd,0,cmd->writeFd,1);
#endif
		close(0);
		close(1);
		dup(cmd->readFd);
		dup(cmd->writeFd);
		if (erro_fd == -1) {
			close(2);
			dup(cmd->parent->outPipe.in_fd);
		} else {
			close(2);
			dup(erro_fd);
		}

		int i = 0;
		for (i = 1024; i > 2; i--) {
			close(i);
		}
		execvp(prog, arg_list);

		fprintf(stderr, "Unknown command: [%s].\n", prog);
		close(0);
		close(1);
		close(2);
		exit(0);
	}
	return child;
}

void showCmd(Cmd *cmd) {
	int i;
	for (i = 0; i < cmd->argc; i++) {
		printf("argv[%d]=%s\n", i, cmd->argv[i]);
	}

}

int indexOf(char *str1, char *str2) {
	char *p = str1;
	int i = 0;
	p = strstr(str1, str2);
	if (p == NULL)
		return -1;
	else {
		while (str1 != p) {
			str1++;
			i++;
		}
	}
	return i;
}

void waitOver(int pid) {
	int status;
	do {
		if (waitpid(pid, &status, WUNTRACED | WCONTINUED) == -1)
			break;
	} while (!
	WIFEXITED(status) && !WIFSIGNALED(status));
}

struct sockaddr_in dest;
struct sockaddr_in serv;
static Client *client = NULL;
PipeFD console;
void showMotd() {
	char *remote_ip = client->remote_ip;
	dprintf(stdo_fd, "(%d)%s open\n", getpid(), remote_ip);
	printf("****************************************\n");
	printf("** Welcome to the information server. **\n");
	printf("****************************************\n");
	//       printf("Your From %s:%d\n",remote_ip,remote_port);
}

static void closedClient(int signo) {
	write(client->clientSendPipe[1], "close\n", 7);
	close(client->clientSendPipe[1]);
	close(client->mainSendPipe[0]);
	close(client->conSocketFd);
	close(console.out_fd);
	close(console.in_fd);
	close(0);
	close(1);
	close(2);
	close(stdo_fd);
	exit(EXIT_SUCCESS);
}

PipeFD queFd[queMAX];;
Cmd *clientCmd;
int qi;
static void readClientCmd() {
	char buffer[255];
	char tmp[255];
	char *req;
	int i;
	memset(buffer, 0, 255);
	fflush(stdout);
	fflush(stdin);
	if (!fgets(buffer, 255, stdin)) {
		closedClient(SIGKILL);
	}
	req = strtok(buffer, "\r\n/");

#ifdef debug
	dprintf(stdo_fd,"(%d+%d)%%%s\n",getpid(),qi,req);
#endif
	if (!req){
		closePipe(&queFd[qi]);
		qi++;
		qi %= queMAX;
		fflush(stdout);
		return ;
	}
	if (strcmp(req, "printenv PATH") == 0) {
		printf("PATH=%s\r\n", getenv("PATH"));
		closePipe(&queFd[qi]);
		qi++;
		qi %= queMAX;
		fflush(stdout);
		return;
	} else if (strncmp(req, "setenv PATH", 11) == 0) {
		sscanf(req, "setenv PATH %s", tmp);
		setenv("PATH", tmp, 1);
		closePipe(&queFd[qi]);
		qi++;
		qi %= queMAX;
		fflush(stdout);
		return;
	} else if (strncmp(req, "exit", 4) == 0) {
		closedClient(SIGKILL);
	} else if (strncmp(req, "who", 3) == 0) {
		write(client->clientSendPipe[1], "who\n", 4);
		qi++;
		qi %= queMAX;
		return;
		//kill(mainPid, SIGUSR1);
	}else if (strncmp(req, "name ", 5) == 0) {
		write(client->clientSendPipe[1], req, strlen(req));
		qi++;
		qi %= queMAX;
		return;
		//kill(mainPid, SIGUSR1);
	}else if (strncmp(req, "yell ", 5) == 0) {
		write(client->clientSendPipe[1], req, strlen(req));
		qi++;
		qi %= queMAX;
		fflush(stdout);
		return;
		//kill(mainPid, SIGUSR1);
	}

	int delay = 0;
	int has_err_pipe = indexOf(req, "!");

#ifdef debug
	if(has_err_pipe!=-1)
	dprintf(stdo_fd,"(%d->%d)has error pipe %d\n",getpid(),delay,has_err_pipe );
#endif

	Array *arr = split(req, "|!");
	clientCmd->argc = ToArray(arr, &clientCmd->argv);
	Cmd *subCmd = malloc(sizeof(Cmd) * clientCmd->argc);
	Cmd *nextCmd = subCmd;
	Cmd *prevCmd = NULL;
	clientCmd->first = NULL;
	for (i = 0; i < clientCmd->argc; i++) {
		*nextCmd = getCmd(clientCmd->argv[i], " \t");
		if (nextCmd->argc == 0)
			continue;
		if (clientCmd->first == NULL) {
			erro_fd = -1;
			clientCmd->first = nextCmd;
			clientCmd->next = nextCmd;
			if (!isNull(&queFd[qi])) {
				nextCmd->outPipe = queFd[qi];
				nextCmd->readFd = queFd[qi].out_fd;

				//if(erro_fd==queFd[qi].in_fd)
			}
		}

		if (i + 1 == clientCmd->argc && i != 0) {//final
			delay = atoi(nextCmd->argv[0]);
			if (delay > 0)
				break;
		}

		if (prevCmd) {
			prevCmd->next = nextCmd;
			nextCmd->prev = prevCmd;
		}
		nextCmd->parent = clientCmd;
		nextCmd->first = clientCmd->first;
		prevCmd = nextCmd;
		nextCmd++;
	}
	if (delay > 0) {

		int dstqi = (qi + delay) % queMAX;
		nextCmd = prevCmd;
		if (isNull(&queFd[dstqi]))
			queFd[dstqi] = newPipeFD();
		prevCmd->writeFd = queFd[dstqi].in_fd;
		if (has_err_pipe > 0)
			erro_fd = queFd[dstqi].in_fd;

#ifdef debug
		dprintf(stdo_fd,"(%d->%d)+%d",getpid(),delay,dstqi );
		dprintf(stdo_fd,"i(%d) o(%d)\n",queFd[dstqi].in_fd,queFd[dstqi].out_fd );
#endif
	}

	int child_pid;
	nextCmd = clientCmd->first;
	while (nextCmd) {
		if (nextCmd->outPipe.in_fd != console.in_fd)
			closeInput(&nextCmd->outPipe);
		child_pid = spawn(nextCmd);

		if (child_pid == 0) //child exec error
		{
			exit(EXIT_SUCCESS);
		} else if (child_pid < 0) {//fork error
			printf("Shell Error may fork too much.\n");
			break;
			//continue;
		}
		waitOver(nextCmd->p_id);
		if (nextCmd->outPipe.out_fd != console.out_fd)
			closeOutput(&nextCmd->outPipe);
		nextCmd = nextCmd->next;
	}

	free(subCmd);
	closePipe(&queFd[qi]);
	qi++;
	qi %= queMAX;
	fflush(stdout);
}
static void clientInit(int listenSocketFd){
	signal(SIGKILL, SIG_DFL);
	signal(SIGINT, SIG_DFL);
	signal(SIGTERM, SIG_DFL);
	signal(SIGUSR1, SIG_DFL);
	signal(SIGCLD, SIG_DFL);
	signal(SIGINT, closedClient);
	signal(SIGKILL, closedClient);
	signal(SIGTERM, closedClient);
	close(client->clientSendPipe[0]);
	close(client->mainSendPipe[1]);
	close(0);
	close(1);
	dup(client->conSocketFd);
	dup(client->conSocketFd);
	erro_fd = -1;
	close(listenSocketFd);
	close(stdi_fd);
	memset(&queFd, -1, queMAX * sizeof(PipeFD));
	qi = 0;
	showMotd();
	console.out_fd = dup(client->conSocketFd);
	console.in_fd = dup(client->conSocketFd);
	clientCmd = (Cmd*) malloc(sizeof(Cmd));
	clientCmd->p_id = getpid();
	clientCmd->outPipe = console;

}
static void printfData(int fd_src,int fd_dst){
	char tmp[1024];
	int len = read(client->mainSendPipe[0], tmp, sizeof(tmp));
	if (len > 0) {
		tmp[len] = '\0';
		dprintf(fd_dst, "%s", tmp);
	}
}
static void clientHandler(int listenSocketFd) {
	clientInit(listenSocketFd);
	fd_set rfds_src;
	fd_set rfds;
	fd_set wfds_src;
	fd_set wfds;
	FD_ZERO(&rfds_src);
	FD_SET(0,&rfds_src);
	FD_SET(1,&wfds_src);
	FD_SET(client->mainSendPipe[0],&rfds_src);
	fflush(stdout);
	while (1) {
		bcopy((const void*) &rfds_src, (void*) &rfds, sizeof(fd_set));
		bcopy((const void*) &wfds_src, (void*) &wfds, sizeof(fd_set));
		int checkLength = __FD_SETSIZE;
		int s = select(checkLength, &rfds, (fd_set*) 0, (fd_set*) 0,
				(struct timeval*) 0);

		if(FD_ISSET(client->mainSendPipe[0],&rfds)){
					printfData(client->mainSendPipe[0],1);
		}else if(isCanClientReadCmd){
			printf("%% ");
			fflush(stdout);
			isCanClientReadCmd=0;
			FD_SET(0,&rfds_src);
		}else
		if(FD_ISSET(0,&rfds)){
			readClientCmd();
			isCanClientReadCmd=1;
		}




	}
	closedClient(SIGKILL);
}

void mainKillHandler() {

}

static void InitMain() {

}
static int allClientAction(int(*action)(Client *)) {
	int i = 0;
	Client *c;
	for (i = 0; i < ClientQueueLength; i++) {
		c = &clientQueue[i];
		if (action(c) == -1) {
			return i;
		}
	}
	return i;
}
static int getNullClinetIndex(Client * c) {
	if (c->pid == 0)
		return -1;
	return 0;
}
static int acceptClient(int listenSocketFd) {
	int socksize = sizeof(struct sockaddr_in);
	int conSocketFd = accept(listenSocketFd, (struct sockaddr *) &dest,
			(socklen_t*) &socksize);
	if (conSocketFd >= 0) {
		int clientIndex = allClientAction(getNullClinetIndex);
		dprintf(stdo_fd, "%d.\n", clientIndex);
		if (clientIndex >= ClientQueueLength) {
			dprintf(conSocketFd, "server is person limit.\n");
			close(conSocketFd);
			return -1;
		}
		client = &clientQueue[clientIndex];

		dprintf(stdo_fd, "%d+ accept ok\n", clientIndex);

		client->conSocketFd = conSocketFd;
		client->index = clientIndex;
		strcpy( client->name , ClientDefaultName);
		client->remote_ip = inet_ntoa(dest.sin_addr);
		client->remote_port = dest.sin_port;
		pipe(client->mainSendPipe);
		pipe(client->clientSendPipe);
		//client->
		client->pid = fork();
		if (client->pid > 0) {//root
			close(client->mainSendPipe[0]);
			close(client->clientSendPipe[1]);
			close(client->conSocketFd);
			client = NULL;
			return clientIndex;
		} else {
			clientHandler(listenSocketFd);
			exit(EXIT_SUCCESS);
		}
	}
	return -1;
}

static void whoCmd(int writeFd) {
	int i;
	dprintf(writeFd,"<ID>\t<nickname>\t<IP/port>\t<indicate me>\n");
	for (i = 0; i < ClientQueueLength; i++) {
		Client *c = &clientQueue[i];
		char isme[]="<- me";
		if (c->pid > 0) {
			if(writeFd==c->mainSendPipe[1]){
				dprintf(writeFd, "%d\t%s\t%s/%d\t%s\r\n", c->index+1, c->name,
													c->remote_ip, c->remote_port,isme);
			}else{
				dprintf(writeFd, "%d\t%s\t%s/%d\t\r\n", c->index+1, c->name,
									c->remote_ip, c->remote_port);
			}
		}
	}

}

int listenSocketFd;
static int killClient(Client* c) {
	if (c->pid > 0) {
		kill(c->pid, SIGKILL);
	}

	c->pid = 0;
	close(c->conSocketFd);
	close(c->clientSendPipe[0]);
	close(c->clientSendPipe[1]);
	close(c->mainSendPipe[0]);
	close(c->mainSendPipe[1]);
	memset(c, 0, sizeof(Client));
	return 0;
}
static void readCmd() {
	char line[255];
	fgets(line, 255, stdin);
	if (strcmp(line, "who\n") == 0) {
		whoCmd(stdo_fd);
	} else if (strcmp(line, "kill\n") == 0) {
		killClient(&clientQueue[0]);
	}
	//printf("sss:%s",input);
}
static void closedMain() {
	allClientAction(killClient);
	close(listenSocketFd);
	exit(EXIT_SUCCESS);

}
void mainClientSignHandler(int signo) {

	int oldmask = sigblock(sigmask(SIGUSR1));
	if (signo == SIGUSR1) {
		dprintf(stdo_fd, "user1\n");
	}
	sigsetmask(oldmask);

	if (signo == SIGCLD) {
		dprintf(stdo_fd, "kill%d \n", getpid());
	}

}

static void clientCastMsg(char *msg,int selfIndex){
	int i;
	for (i = 0; i < ClientQueueLength; i++) {
		Client *c = &clientQueue[i];
		if (c->pid > 0) {
		if(selfIndex!=i){
				if(strlen(msg)>0)
					dprintf(c->mainSendPipe[1], "%s",msg);
		}
		}
	}
}
static void checkAllClientRpipe(fd_set* rfds_src, fd_set* rfds) {
	int i;
	char msg[255];
	char rev[255];
	Client *c;
	for (i = 0; i < ClientQueueLength; i++) {
		c = &clientQueue[i];
		if (c->pid > 0) {
			if (FD_ISSET(c->clientSendPipe[0],rfds)) {
				char tmp[1024];
				int len = read(c->clientSendPipe[0], tmp, 1024);
				if (len > 0) {
					tmp[len] = '\0';
					if(strncmp("who",tmp,3)==0){
						whoCmd(c->mainSendPipe[1]);
						dprintf(stdo_fd, "%s", tmp);
					}else if(strncmp("name ",tmp,5)==0){
						//sscanf(tmp,"name %s\n",c->name);
						sprintf(c->name,"%s",&tmp[5]);
						sprintf(msg,"*** User from %s/%d is named '%s'. ***\r\n",c->remote_ip,c->remote_port,c->name);
						clientCastMsg(msg,-1);
						dprintf(stdo_fd, "%s", msg);
					}else if(strncmp("yell ",tmp,5)==0){
						sprintf(msg,"*** %s yelled %s\r\n",c->name,&tmp[5]);
						clientCastMsg(msg,i);
						dprintf(stdo_fd, "%s", msg);
					}

				} else {
					dprintf(stdo_fd, "%s client exit", c->name);
					sprintf(msg,"*** User '%s' left. ***\r\n",c->name);
					clientCastMsg(msg,i);
					FD_CLR(c->clientSendPipe[0],rfds_src);
					killClient(c);
				}
			}
		}
	}
}
int main(int argc, char *argv[], char *envp[]) {
	printf("Pipe buffer size=%d\n", PIPE_BUF);
	printf("FD size=%d\n", __FD_SETSIZE);

	chdir("ras");
	char tmp[255];
	getcwd(tmp, 255);
	setenv("PWD", tmp, 1);
	setenv("PATH", "bin:.", 1);
	printf("PWD=%s\n", getenv("PWD"));
	printf("PATH=%s\n", getenv("PATH"));

	printf("Input Server Port:");
	char input[10];
	fgets(input, 9, stdin);
	if (atoi(input) != 0)
		PORTNUM = atoi(input);

	stdi_fd = dup(0);
	stdo_fd = dup(1);
	mainPid = getpid();

	memset(&serv, 0, sizeof(serv));
	serv.sin_family = AF_INET;
	serv.sin_addr.s_addr = INADDR_ANY;
	serv.sin_port = htons(PORTNUM);

	listenSocketFd = socket(AF_INET, SOCK_STREAM, 0);

	bind(listenSocketFd, (struct sockaddr *) &serv, sizeof(struct sockaddr));

	listen(listenSocketFd, 5);
	signal(SIGKILL, SIG_DFL);
	signal(SIGINT, SIG_DFL);
	signal(SIGTERM, SIG_DFL);
	signal(SIGKILL, closedMain);
	signal(SIGINT, closedMain);
	signal(SIGTERM, closedMain);
	int flags = fcntl(listenSocketFd, F_GETFL, 0);
	fcntl(listenSocketFd, F_SETFL, flags | O_NONBLOCK);

	signal(SIGUSR1, mainClientSignHandler);
	signal(SIGCHLD, mainClientSignHandler);
	InitClientQueue();
	fd_set rfds_src;
	fd_set rfds;
	FD_ZERO(&rfds_src);
	FD_SET(0,&rfds_src);
	FD_SET(listenSocketFd,&rfds_src);
	while (1) {
		dprintf(stdo_fd, "# ");
		bcopy((const void*) &rfds_src, (void*) &rfds, sizeof(fd_set));
		int checkLength = __FD_SETSIZE;
		int s = select(checkLength, &rfds, (fd_set*) 0, (fd_set*) 0,
				(struct timeval*) 0);
		if (s == -1) {
			continue;
		}

		if (FD_ISSET(listenSocketFd,&rfds)) {
			int index = acceptClient(listenSocketFd);
			Client *c = &clientQueue[index];
			char msg[255];
			sprintf(msg,"*** User '%s' entered from %s/%d. ***\r\n",c->name,c->remote_ip,c->remote_port);
			clientCastMsg(msg,-1);
			FD_SET(c->clientSendPipe[0],&rfds_src);
		}

		if (FD_ISSET(0,&rfds)) {
			readCmd();
		}
		checkAllClientRpipe(&rfds_src, &rfds);
	}

	dprintf(stdo_fd, "server stop\n");
	close(listenSocketFd);
	exit(EXIT_SUCCESS);
}

